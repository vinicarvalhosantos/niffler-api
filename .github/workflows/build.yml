#Workflow name
name: CI/CD Pipeline
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  #Test's job
  tests:
    env:
      AWS__ACCESS_KEY: ${{secrets.AWS__ACCESS_KEY}},
      AWS__SECRET_KEY: ${{secrets.AWS__SECRET_KEY}},
      CLIENT_ID: ${{secrets.CLIENT_ID}},
      CLIENT_SECRET: ${{secrets.CLIENT_SECRET}},
      PROD_URL: ${{secrets.PROD_URL}},
      STAGE_URL: ${{secrets.STAGE_URL}},
      TWITCH_AUTH_BASE_URL: ${{secrets.TWITCH_AUTH_BASE_URL}},
      TWITCH_HELIX_BASE_URL: ${{secrets.TWITCH_HELIX_BASE_URL}},
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Tests
      - name: Run Tests
        run: mvn -B test
  sonar:
    needs: tests
    name: Build and Sonar analyse
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=vinicarvalhosantos_niffler-api
  build-deploy:
    needs: sonar
    name: Deploy application to lambda
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'
      - uses: aws-actions/setup-sam@v1
      - name: Install CLI
        uses: dopplerhq/cli-action@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS__ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.AWS__SECRET_KEY}}
          aws-region: sa-east-1
      - name: Build with maven
        run: mvn -B package -DskipTests --file pom.xml
      # Setting up template.yaml with environment variables
      - name: Setup template-deploy.yaml
        run: |
          chmod +x ./deploy-template.sh
          ./deploy-template.sh > template-deploy.yaml
        shell: bash
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          TWITCH_AUTH_BASE_URL: ${{secrets.TWITCH_AUTH_BASE_URL}}
          TWITCH_HELIX_BASE_URL: ${{secrets.TWITCH_HELIX_BASE_URL}}
          CLIENT_ID: ${{secrets.CLIENT_ID}}
          CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
          AWS__ACCESS_KEY: ${{secrets.AWS__ACCESS_KEY}}
          AWS__SECRET_KEY: ${{secrets.AWS__SECRET_KEY}}
          STAGE_URL: ${{secrets.STAGE_URL}}
          PROD_URL: ${{secrets.PROD_URL}}
      # sam build
      - run: sam build --template-file template-deploy.yaml --use-container
      # sam deploy
      - run: sam deploy --template template-deploy.yaml --no-confirm-changeset --no-fail-on-empty-changeset --stack-name niffler-api --s3-bucket niffler-api --capabilities CAPABILITY_IAM --region sa-east-1
      - run: rm template-deploy.yaml